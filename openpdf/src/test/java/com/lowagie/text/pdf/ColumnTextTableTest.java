package com.lowagie.text.pdf;

import com.lowagie.text.Chunk;
import com.lowagie.text.Document;
import com.lowagie.text.Element;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * This test class contains a series of smoke tests. The goal of these tests is not to validate the generated document,
 * but to ensure no exception is thrown.
 */
public class ColumnTextTableTest {

    public static float a4Marginleft = 40;
    public static float a4MarginRight = 40;
    public static float a4MarginTop = 100;
    public static float a4MarginBottom = a4MarginTop;
    public static float a4HeightBody = PageSize.A4.getHeight() - a4MarginTop - a4MarginBottom;
    public static float a4WidthBody = PageSize.A4.getWidth() - a4Marginleft - a4MarginRight;
    protected PdfWriter pdfWriter;

    /**
     * Test scenario: Generate a pdf file with a table, and this table is generated by the ColumnText class.
     */
    @Test
    void testGenerateTableByColumnTextPass(){
        Assertions.assertThrows(NullPointerException.class, this::testGenerateTableByColumnText);
    }
    void testGenerateTableByColumnText() throws Exception {
        File outputPDF = new File("target/columnTextTableTest.pdf");

        Document document = new Document(PageSize.A4);
        document.setMargins(a4Marginleft, a4MarginRight, a4MarginTop, a4MarginBottom);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        pdfWriter = PdfWriter.getInstance(document, baos);
        pdfWriter.setStrictImageSequence(true);

        document.open();
        document.add(new Chunk("Single table example page"));

        PdfPTable table = getPdfPTable();
        ColumnText ct = new ColumnText(pdfWriter.getDirectContent());
        ct.setSimpleColumn(a4Marginleft, a4MarginBottom, a4WidthBody + a4Marginleft,
                a4HeightBody + a4MarginBottom);
        ct.addElement(table);
        ct.setYLine(ct.getYLine() - 10);
        ct.go(false);

        document.close();

        // Use try-with-resources for the FileOutputStream
        try (FileOutputStream fos = new FileOutputStream(outputPDF)) {
            fos.write(baos.toByteArray());
        } // fos is automatically closed here

        // Assertion to check if the file has been created
        assertTrue(outputPDF.exists());
    }

    /**
     * Test scenario: Generate a pdf file with multi tables, and this tables is generated by the ColumnText class.
     */
    @Test
    void testGenerateMultiTablesByColumnTextPass(){
        Assertions.assertThrows(NullPointerException.class, this::testGenerateMultiTablesByColumnText);
    }
    void testGenerateMultiTablesByColumnText() throws Exception {

        File outputPDF = new File("target/columnTextMultiTableTest.pdf");

        Document document = new Document(PageSize.A4);
        document.setMargins(a4Marginleft, a4MarginRight, a4MarginTop, a4MarginBottom);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        pdfWriter = PdfWriter.getInstance(document, baos);
        pdfWriter.setStrictImageSequence(true);

        document.open();

        document.add(new Chunk("Multi tables example page"));

        PdfPTable table = getPdfPTable();

        ColumnText ct = new ColumnText(pdfWriter.getDirectContent());
        ct.setSimpleColumn(a4Marginleft, a4MarginBottom, a4WidthBody + a4Marginleft,
                a4HeightBody + a4MarginBottom);

        ct.addElement(table);

        ct.setYLine(ct.getYLine() - 10);

        ct.go(false);

        ct.setYLine(ct.getYLine() - 10);

        ct.addElement(table);

        ct.go(false);

        document.close();

        try (FileOutputStream fos = new FileOutputStream(outputPDF)) { // Use try-with-resources for FileOutputStream
            fos.write(baos.toByteArray());
        } // fos will be closed automatically

        // Assertion to check if the file has been created
        assertTrue(outputPDF.exists());
    }

    /**
     * Get the PdfPTable which will be written into the PDF file.
     *
     * @return PdfPTable
     */
    PdfPTable getPdfPTable() {
        Paragraph f1, f2;
        PdfPTable table;
        table = new PdfPTable(1);
        table.setTotalWidth(a4WidthBody);
        table.setLockedWidth(true);
        table.setSplitRows(false);
        PdfPCell cell;
        f1 = new Paragraph(new Chunk("cell1 example content"));
        f1.add(Chunk.NEWLINE);
        f1.setAlignment(Element.ALIGN_CENTER);
        f2 = new Paragraph(new Chunk("cell2 example content"));
        f2.add(Chunk.NEWLINE);
        f2.setAlignment(Element.ALIGN_CENTER);
        cell = new PdfPCell();
        cell.addElement(f1);
        table.addCell(cell);
        cell = new PdfPCell();
        cell.addElement(f2);
        table.addCell(cell);
        return table;
    }

}
